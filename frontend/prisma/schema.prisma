// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserTag {
  bot
  user // 用户
  developer // 开发
  manager // 管理
}

model User {
  id        String    @id @default(uuid())
  kinde_id  String?   @unique @default(dbgenerated("NULL"))
  name      String
  avatar    String?
  tag       UserTag[]
  createdAt DateTime  @default(now())

  posts         Post[]
  comments      Comment[]
  subscriptions Subscription[]
}

enum PostSection {
  IWhisper
  Feedback
}

model Post {
  id        String      @id @default(uuid())
  byr_id    String?     @unique @default(dbgenerated("NULL"))
  topic     String
  section   PostSection
  updatedAt DateTime
  createdAt DateTime

  userId   String
  user     User      @relation(fields: [userId], references: [id])
  comments Comment[]
}

model Comment {
  id       String   @id @default(uuid())
  sequence Int
  content  String?
  like     Int
  dislike  Int
  time     DateTime

  postId String
  post   Post   @relation(fields: [postId], references: [id])
  userId String
  user   User   @relation(fields: [userId], references: [id])

  @@unique([postId, sequence])
}

enum TaskStatus {
  pending
  running
}

enum LastTaskStatus {
  completed
  error
}

model ScheduledTask {
  id         Int             @id @default(autoincrement())
  name       String
  cron       String
  status     TaskStatus
  lastStatus LastTaskStatus?
  lastRun    DateTime?
  nextRun    DateTime?
}

model Subscription {
  id        String   @id @default(uuid())
  userId    String
  endpoint  String
  p256dh    String
  auth      String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}
