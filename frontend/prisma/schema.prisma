// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserTag {
  bot
  user // 用户
  developer // 开发
  manager // 管理
}

model User {
  id                      String                   @id @default(uuid())
  kinde_id                String?                  @unique @default(dbgenerated("NULL"))
  name                    String
  avatar                  String?
  tag                     UserTag[]
  createdAt               DateTime                 @default(now())
  // 内容
  posts                   Post[]
  comments                Comment[]
  // 通知
  emailNotification       EmailNotification?
  telegramNotification    TelegramNotification?
  browserPushNotification BrowserPushNotification?
  // 通知偏好
  botBindings             BotBinding[]             @relation("UserBotBindings")
  boundByUsers            BotBinding[]             @relation("BotUserBindings")
  notificationPreferences NotificationPreference[]
  claimedItems            ClaimedItem[]
}

enum PostSection {
  IWhisper
  Feedback
}

model Post {
  id        String      @id @default(uuid())
  byr_id    String?     @unique @default(dbgenerated("NULL"))
  topic     String
  section   PostSection
  updatedAt DateTime
  createdAt DateTime

  userId    String
  user      User          @relation(fields: [userId], references: [id])
  comments  Comment[]
  claimedBy ClaimedItem[]
}

model Comment {
  id       String   @id @default(uuid())
  sequence Int
  content  String?
  like     Int
  dislike  Int
  time     DateTime

  postId    String
  post      Post          @relation(fields: [postId], references: [id])
  userId    String
  user      User          @relation(fields: [userId], references: [id])
  claimedBy ClaimedItem[]

  @@unique([postId, sequence])
}

enum TaskStatus {
  pending
  running
}

enum LastTaskStatus {
  completed
  error
}

model ScheduledTask {
  id         Int             @id @default(autoincrement())
  name       String
  cron       String
  status     TaskStatus
  lastStatus LastTaskStatus?
  lastRun    DateTime?
  nextRun    DateTime?
}

model BrowserPushNotification {
  id        String   @id @default(uuid())
  endpoint  String
  p256dh    String
  auth      String
  disabled  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
}

model TelegramNotification {
  id        String   @id @default(uuid())
  chatId    String
  disabled  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
}

model EmailNotification {
  id        String   @id @default(uuid())
  email     String
  disabled  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
}

// 通知选项
enum NotificationTrigger {
  BOT_REPLY_TO_POST
  BOT_REPLY_TO_COMMENT
  ANY_REPLY_TO_POST
  ANY_REPLY_TO_COMMENT
}

model BotBinding {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation("UserBotBindings", fields: [userId], references: [id])
  botUserId String
  botUser   User     @relation("BotUserBindings", fields: [botUserId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model NotificationPreference {
  id        String              @id @default(uuid())
  userId    String
  user      User                @relation(fields: [userId], references: [id])
  trigger   NotificationTrigger
  isEnabled Boolean             @default(true)
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
}

model ClaimedItem {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  postId    String?
  post      Post?    @relation(fields: [postId], references: [id])
  commentId String?
  comment   Comment? @relation(fields: [commentId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, postId, commentId])
}
